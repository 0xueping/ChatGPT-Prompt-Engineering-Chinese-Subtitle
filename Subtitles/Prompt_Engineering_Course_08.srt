1
00:00:00,000 --> 00:00:08,560
One of the exciting things about a large language model is you could use it to
大型语言模型的一个令人兴奋之处在于您可以使用它来

2
00:00:08,560 --> 00:00:12,620
build a custom chatbot with only a modest amount of effort.
仅需适度的努力就可以构建一个定制的聊天机器人。

3
00:00:12,620 --> 00:00:15,100
ChatGPT, the web interface,
ChatGPT，即Web界面，

4
00:00:15,100 --> 00:00:17,620
is a way for you to have a conversational interface,
是一种让您拥有会话式界面的方法，

5
00:00:17,620 --> 00:00:20,440
a conversation via a large language model.
通过大型语言模型进行对话。

6
00:00:20,440 --> 00:00:23,060
But one of the cool things is you can also use
但有趣的是，您还可以使用

7
00:00:23,060 --> 00:00:27,160
a large language model to build your custom chatbot to maybe play the role of
大型语言模型来构建您的定制聊天机器人，它可能扮演

8
00:00:27,160 --> 00:00:31,480
an AI customer service agent or an AI order taker for restaurants.
AI客服代表或餐厅AI接单员的角色。

9
00:00:31,480 --> 00:00:34,400
In this video, you learn how to do that for yourself.
在这个视频中，您将学习如何为自己做到这一点。

10
00:00:34,400 --> 00:00:37,040
I'm going to describe the components of
我将详细描述

11
00:00:37,040 --> 00:00:39,900
the OpenAI chat completions format in more detail,
OpenAI聊天补全格式的组成部分，

12
00:00:39,900 --> 00:00:42,500
and then you're going to build a chatbot yourself.
然后您将自己构建一个聊天机器人。

13
00:00:42,500 --> 00:00:44,360
So let's get into it.
那么，让我们开始吧。

14
00:00:44,360 --> 00:00:48,960
So first, we'll set up the OpenAI Python package as usual.
首先，我们将像往常一样设置OpenAI Python软件包。

15
00:00:48,960 --> 00:00:53,340
So chat models like ChatGPT are actually trained to take a series of
实际上，像ChatGPT这样的聊天模型经过训练后可以接受一系列

16
00:00:53,340 --> 00:00:57,700
messages as input and return a model-generated message as output.
将消息作为输入并返回模型生成的消息作为输出。

17
00:00:57,700 --> 00:01:00,100
So although the chat format is designed to make
尽管聊天格式的设计目的是为了让

18
00:01:00,100 --> 00:01:02,260
multi-turn conversations like this easy,
像这样的多轮对话变得简单，

19
00:01:02,260 --> 00:01:05,940
we've seen through the previous videos that it's also just as
从之前的视频中我们也看到，同样地，

20
00:01:05,940 --> 00:01:09,580
useful for single-turn tasks without any conversation.
它对于不需要对话的单轮任务也非常有用。

21
00:01:09,580 --> 00:01:14,120
So next, we're going to define two helper functions.
接下来，我们将定义两个辅助函数。

22
00:01:14,120 --> 00:01:17,000
So this is the one that we've been using throughout all the videos,
这是我们在所有视频中一直使用的一个，

23
00:01:17,000 --> 00:01:20,280
and it's the get_Completion function.
它就是get_Completion函数。

24
00:01:20,280 --> 00:01:22,000
But if you look at it,
但如果你仔细观察，

25
00:01:22,000 --> 00:01:24,980
we give a prompt but then inside the function,
我们提供了一个提示，但在函数内部，

26
00:01:24,980 --> 00:01:27,900
what we're actually doing is putting this prompt into
实际上我们在做的是将这个提示放入

27
00:01:27,900 --> 00:01:32,300
what looks like some user message.
看起来像是某个用户消息。

28
00:01:32,300 --> 00:01:37,140
This is because the ChatGPT model is a chat model,
这是因为ChatGPT模型是一个聊天模型，

29
00:01:37,140 --> 00:01:40,140
which means it's trained to take a series of messages as input,
这意味着它被训练成将一系列消息作为输入，

30
00:01:40,140 --> 00:01:43,940
and then return model-generated messages output.
然后返回模型生成的消息输出。

31
00:01:43,940 --> 00:01:46,460
So the user message is the input,
所以用户消息是输入，

32
00:01:46,460 --> 00:01:49,300
and then the assistant message is the output.
然后助手消息是输出。

33
00:01:49,300 --> 00:01:51,240
So in this video,
所以在这个视频中，

34
00:01:51,240 --> 00:01:53,680
we're going to actually use a different helper function,
我们实际上将使用一个不同的辅助函数，

35
00:01:53,680 --> 00:01:58,320
and instead of putting a single prompt as input and getting a single completion,
而不是将单个提示作为输入并获得单个补全，

36
00:01:58,320 --> 00:02:01,620
we're going to pass in a list of messages,
我们将传入一系列消息，

37
00:02:01,620 --> 00:02:05,320
and these messages can be from a variety of different roles.
这些消息可以来自不同的角色。

38
00:02:05,320 --> 00:02:07,080
So I'll describe those.
接下来我会详细描述。

39
00:02:07,080 --> 00:02:10,040
So here's an example of a list of messages.
这里有一个消息列表的例子。

40
00:02:10,040 --> 00:02:12,920
So the first message is a system message,
首先是一个系统消息，

41
00:02:12,920 --> 00:02:15,160
which gives an overall instruction.
它给出了总体指示。

42
00:02:15,160 --> 00:02:16,280
Then after this message,
在这条消息之后，

43
00:02:16,280 --> 00:02:19,960
we have turns between the user and the assistant,
用户和助手之间会进行轮流，

44
00:02:19,960 --> 00:02:21,880
and this will continue to go on.
这将继续进行。

45
00:02:21,880 --> 00:02:23,720
If you've ever used ChatGPT,
如果您曾经使用过ChatGPT，

46
00:02:23,720 --> 00:02:27,640
the web interface, then your messages are the user messages,
Web界面中，您的消息就是用户消息，

47
00:02:27,640 --> 00:02:30,840
and then ChatGPT's messages are the assistant messages.
然后ChatGPT的消息就是助手消息。

48
00:02:30,840 --> 00:02:35,720
So the system message helps to set the behavior and persona of the assistant,
系统消息有助于设定助手的行为和角色，

49
00:02:35,720 --> 00:02:38,840
and it acts as a high-level instruction for the conversation.
它充当对话的高级指示。

50
00:02:38,840 --> 00:02:40,580
So you can think of it as whispering in
你可以把它想象成在

51
00:02:40,580 --> 00:02:43,560
the assistant's ear and guiding its responses
助手的耳边低语并引导它的回应，

52
00:02:43,560 --> 00:02:46,240
without the user being aware of the system message.
而用户并不知道这个系统消息。

53
00:02:46,240 --> 00:02:47,880
So as the user,
所以作为用户，

54
00:02:47,880 --> 00:02:49,320
if you've ever used ChatGPT,
如果您曾经使用过ChatGPT，

55
00:02:49,320 --> 00:02:52,560
you probably don't know what's in ChatGPT's system message,
您可能不知道ChatGPT的系统消息中有什么，

56
00:02:52,560 --> 00:02:54,240
and that's the intention.
这就是设计的初衷。

57
00:02:54,240 --> 00:02:57,200
The benefit of the system message is that it provides you,
系统消息的好处在于它为您提供了，

58
00:02:57,200 --> 00:02:59,080
the developer, with a way to frame
作为开发者，一个构建

59
00:02:59,080 --> 00:03:03,160
the conversation without making the request itself part of the conversation.
对话的方式，而无需让请求本身成为对话的一部分。

60
00:03:03,160 --> 00:03:06,720
So you can guide the assistant and whisper in
因此，您可以引导助手并低语在

61
00:03:06,720 --> 00:03:11,480
its ear and guide its responses without making the user aware.
耳边引导它的回应，而不让用户察觉。

62
00:03:12,080 --> 00:03:17,240
So now let's try to use these messages in a conversation.
那么现在让我们尝试在对话中使用这些消息。

63
00:03:17,240 --> 00:03:23,560
So we'll use our new helper function to get the completion from the messages,
我们将使用新的辅助函数从消息中获取补全内容，

64
00:03:23,560 --> 00:03:29,000
and we're also using a higher temperature.
同时，我们还使用了更高的“随机性参数”。

65
00:03:29,000 --> 00:03:31,240
So the system message says,
所以系统消息说，

66
00:03:31,240 --> 00:03:33,280
"You're an assistant that speaks like Shakespeare."
“你是一个说话像莎士比亚的助手。”

67
00:03:33,280 --> 00:03:37,800
So this is us describing to the assistant how it should behave,
这是我们向助手描述它应该如何表现，

68
00:03:37,800 --> 00:03:40,520
and then the first user message is, "Tell me a joke."
然后第一个用户消息是，“给我讲个笑话。”

69
00:03:40,520 --> 00:03:43,520
The next is, "Why did the chicken cross the road?"
接下来是，“鸡为什么过马路？”

70
00:03:43,520 --> 00:03:47,320
Then the final user message is, "I don't know."
然后最后一条用户消息是，“我不知道。”

71
00:03:47,320 --> 00:03:51,720
So if we run this,
所以，如果我们运行这个，

72
00:03:51,720 --> 00:03:57,280
the response is to get to the other side. Let's try again.
回应是“为了到达另一边”。我们再试一次。

73
00:03:57,280 --> 00:03:59,800
"To get to the other side,
“为了到达另一边，

74
00:03:59,800 --> 00:04:03,880
Fair sir or madam," it is an old and classic that never fails.
公平的先生或女士，”这是一句古老且经典的、永不过时的话。

75
00:04:03,880 --> 00:04:06,960
So that's our Shakespearean response.
所以这就是我们的莎士比亚式回应。

76
00:04:06,960 --> 00:04:10,040
Let's actually try one more thing,
实际上，让我们再尝试一件事，

77
00:04:10,040 --> 00:04:13,360
because I want to make it even clearer that this is the assistant message.
因为我想更清楚地表明这是助手消息。

78
00:04:13,360 --> 00:04:21,200
So here let's just go and print the entire message response.
所以在这里，我们只需打印整个消息回应。

79
00:04:21,200 --> 00:04:38,080
So just to make this even clearer,
所以为了让这更清楚，

80
00:04:38,080 --> 00:04:43,040
this response is an assistant message.
这个回应是一个助手消息。

81
00:04:43,040 --> 00:04:47,520
So the role is assistant and then the content is the message itself.
所以角色是助手，然后内容就是消息本身。

82
00:04:47,520 --> 00:04:49,840
So that's what's happening in this helper function.
所以这就是这个辅助函数中发生的事情。

83
00:04:49,840 --> 00:04:53,720
We're just passing out the content of the message.
我们只是传递消息的内容。

84
00:05:06,800 --> 00:05:09,800
So now let's do another example.
所以现在让我们做另一个例子。

85
00:05:09,800 --> 00:05:11,680
So here our messages are,
所以这里我们的消息是，

86
00:05:11,680 --> 00:05:13,720
the system message is,
系统消息是，

87
00:05:13,720 --> 00:05:16,400
"You're a friendly chatbot," and the first user message is,
“你是一个友好的聊天机器人，”第一个用户消息是，

88
00:05:16,400 --> 00:05:17,920
"Hi, my name is Isa."
“嗨，我叫Isa。”

89
00:05:17,920 --> 00:05:22,480
We want to get the first user message.
我们想获得第一个用户消息。

90
00:05:22,480 --> 00:05:23,920
So let's execute this,
那么让我们执行这个，

91
00:05:23,920 --> 00:05:26,480
the first assistant message.
第一个助手消息。

92
00:05:26,480 --> 00:05:28,720
So the first message is,
所以第一条消息是，

93
00:05:28,720 --> 00:05:30,240
"Hello, Isa. It's nice to meet you.
“你好，Isa。很高兴认识你。

94
00:05:30,240 --> 00:05:32,560
How can I assist you today?"
今天我能帮助你做什么？”

95
00:05:32,560 --> 00:05:40,680
Now let's try another example.
现在我们来试试另一个例子。

96
00:05:40,680 --> 00:05:44,160
So here our messages are,
所以这里我们的消息是，

97
00:05:44,160 --> 00:05:48,920
system message, "You're a friendly chatbot," and the first user message is,
系统消息，“你是一个友好的聊天机器人，”第一个用户消息是，

98
00:05:48,920 --> 00:05:55,760
"Yes, can you remind me what is my name?"
“是的，你能提醒我，我的名字是什么吗？”

99
00:05:55,760 --> 00:05:58,240
Let's get the response.
让我们看看回应。

100
00:06:00,920 --> 00:06:07,600
As you can see, the model doesn't actually know my name.
如你所见，模型实际上不知道我的名字。

101
00:06:07,600 --> 00:06:12,560
So each conversation with a language model is a standalone interaction,
所以与语言模型的每次对话都是独立的互动，

102
00:06:12,560 --> 00:06:15,040
which means that you must provide all relevant messages
这意味着您必须提供所有相关消息

103
00:06:15,040 --> 00:06:17,960
for the model to draw from in the current conversation.
以便模型在当前对话中获取信息。

104
00:06:17,960 --> 00:06:23,080
If you want the model to draw from or "remember" earlier parts of a conversation,
如果您希望模型从之前的对话中获取或“记住”信息，

105
00:06:23,080 --> 00:06:26,520
you must provide the earlier exchanges in the input to the model.
您必须在输入模型中提供之前的交流内容。

106
00:06:26,520 --> 00:06:28,800
So we'll refer to this as context.
所以我们把这称为上下文。

107
00:06:28,800 --> 00:06:32,080
So let's try this.
那我们试试吧。

108
00:06:32,080 --> 00:06:40,840
So now we've given the context that the model needs,
现在我们已经提供了模型所需的上下文，

109
00:06:40,840 --> 00:06:43,440
which is my name in the previous messages,
就是之前消息中的我的名字，

110
00:06:43,440 --> 00:06:45,000
and we'll ask the same question.
然后我们将问同样的问题。

111
00:06:45,000 --> 00:06:47,480
So we'll ask what my name is,
所以我们会问我的名字是什么，

112
00:06:47,480 --> 00:06:52,160
and the model is able to respond because it has all of the context it
模型能够回应，因为它具备了所有的上下文，

113
00:06:52,160 --> 00:06:57,400
needs in this list of messages that we input to it.
我们输入给它的这些消息列表中的内容。

114
00:06:57,400 --> 00:07:00,600
So now you're going to build your own chatbot.
所以现在你将要构建自己的聊天机器人。

115
00:07:00,600 --> 00:07:03,880
This chatbot is going to be called orderbot,
这个聊天机器人将被称为orderbot，

116
00:07:03,880 --> 00:07:07,360
and we're going to automate the collection of
我们将自动收集

117
00:07:07,360 --> 00:07:11,320
user prompts and assistant responses in order to build this orderbot.
用户提示和助手回应以构建这个orderbot。

118
00:07:11,320 --> 00:07:14,040
It's going to take orders at a pizza restaurant.
它将在一个披萨餐厅接受订单。

119
00:07:14,040 --> 00:07:17,880
So first, we're going to define this helper function.
首先，我们要定义这个辅助函数。

120
00:07:17,880 --> 00:07:22,040
What this is doing is it's going to collect our user messages,
这个函数将收集我们的用户消息，

121
00:07:22,040 --> 00:07:26,640
so we can avoid typing them in by hand in the way that we did above.
这样我们就可以避免像上面那样手动输入它们。

122
00:07:26,640 --> 00:07:31,600
This is going to collect the prompts from a user interface that we'll build below,
这将从我们下面要构建的用户界面中收集提示，

123
00:07:31,600 --> 00:07:34,640
and then append it to a list called context,
然后将其添加到一个叫做context的列表中，

124
00:07:34,640 --> 00:07:38,120
and then it will call the model with that context every time.
然后每次都会用那个上下文调用模型。

125
00:07:38,120 --> 00:07:41,160
The model response is then also added to the context.
然后模型响应也会被添加到上下文中。

126
00:07:41,160 --> 00:07:45,400
So the model message is added to the context,
所以模型消息被添加到上下文中，

127
00:07:45,400 --> 00:07:47,000
the user message is added to the context,
用户消息被添加到上下文中，

128
00:07:47,000 --> 00:07:49,720
so on, so it just grows longer and longer.
依此类推，所以它会变得越来越长。

129
00:07:49,720 --> 00:07:54,520
This way, the model has the information it needs to determine what to do next.
这样，模型就具备了决定接下来要做什么的所需信息。

130
00:07:54,520 --> 00:08:00,440
So now we'll set up and run this UI to display the orderbot.
现在我们将设置并运行这个UI来显示orderbot。

131
00:08:00,440 --> 00:08:02,200
So here's the context,
这里是上下文，

132
00:08:02,200 --> 00:08:06,080
and it contains the system message that contains the menu.
它包含了包含菜单的系统消息。

133
00:08:06,080 --> 00:08:10,000
Note that every time we call the language model,
注意，每次我们调用语言模型，

134
00:08:10,000 --> 00:08:11,880
we're going to use the same context,
我们都将使用相同的上下文，

135
00:08:11,880 --> 00:08:15,240
and the context is building up over time.
并且随着时间的推移，上下文在不断累积。

136
00:08:15,240 --> 00:08:20,920
Then let's execute this.
那么我们来执行这个。

137
00:08:20,920 --> 00:08:26,680
I'm going to say,
我要说，

138
00:08:26,680 --> 00:08:31,240
"Hi, I would like to order a pizza."
“嗨，我想订一份披萨。”

139
00:08:31,240 --> 00:08:37,240
The assistant says, "Great.
助手说，“太好了。

140
00:08:37,240 --> 00:08:38,720
What pizza would you like to order?
您想要订哪种披萨？

141
00:08:38,720 --> 00:08:42,360
We have pepperoni, cheese, and eggplant pizza."
我们有意大利辣香肠、奶酪和茄子披萨。”

142
00:08:42,360 --> 00:08:46,560
How much are they?
它们多少钱？

143
00:08:47,560 --> 00:08:58,680
Great. Okay, we have the prices.
好的。好，我们有价格了。

144
00:08:58,680 --> 00:09:03,440
I think I'm feeling a medium eggplant pizza.
我想要一份中份茄子披萨。

145
00:09:03,440 --> 00:09:13,840
So as you can imagine,
所以如您所想，

146
00:09:13,840 --> 00:09:15,880
we could continue this conversation.
我们可以继续这个对话。

147
00:09:15,880 --> 00:09:19,560
Let's look at what we've put in the system message.
让我们看看我们在系统消息里加了什么。

148
00:09:19,560 --> 00:09:22,240
So you are orderbot,
所以你是orderbot，

149
00:09:22,240 --> 00:09:25,120
an automated service to collect orders for a pizza restaurant.
一个为披萨餐厅收集订单的自动化服务。

150
00:09:25,120 --> 00:09:26,440
You first greet the customer,
您首先要向顾客问候，

151
00:09:26,440 --> 00:09:27,560
then collect the order,
然后收集订单，

152
00:09:27,560 --> 00:09:29,680
and then ask if it's a pickup or delivery.
接着询问是自取还是送货。

153
00:09:29,680 --> 00:09:31,320
You wait to collect the entire order,
您等待收集整个订单，

154
00:09:31,320 --> 00:09:33,520
then summarize it and check for a final time
然后总结并最后确认一次

155
00:09:33,520 --> 00:09:35,640
if the customer wants to add anything else.
顾客是否还想添加其他东西。

156
00:09:35,640 --> 00:09:38,240
If it's a delivery, you can ask for an address.
如果是送货，您可以询问地址。

157
00:09:38,240 --> 00:09:39,920
Finally, you collect the payment.
最后，您收取付款。

158
00:09:39,920 --> 00:09:41,640
Make sure to clarify all options,
确保澄清所有选项，

159
00:09:41,640 --> 00:09:45,000
extras, and sizes to uniquely identify the item from the menu.
附加选项和尺寸，以便从菜单中唯一识别该项。

160
00:09:45,000 --> 00:09:48,680
You respond in a short, very conversational, friendly style.
您以简短、非常对话式、友好的风格回应。

161
00:09:48,680 --> 00:09:52,760
The menu includes, and then here we have the menu.
菜单包括，然后我们在这里有菜单。

162
00:09:52,760 --> 00:09:56,040
So let's go back to our conversation,
那么让我们回到我们的对话，

163
00:09:56,040 --> 00:10:00,280
and let's see if the assistant has been following the instructions.
看看助手是否遵循了指示。

164
00:10:00,280 --> 00:10:03,640
Okay, great. The assistant asks if we want any toppings,
好的，很好。助手询问我们是否需要任何配料，

165
00:10:03,640 --> 00:10:06,960
which we specified in the system message.
这是我们在系统消息中指定的。

166
00:10:06,960 --> 00:10:10,960
So I think we want no extra toppings.
所以我认为我们不需要额外的配料。

167
00:10:10,960 --> 00:10:18,360
Sure thing.
没问题。

168
00:10:18,360 --> 00:10:21,120
Is there anything else we'd like to order?
我们还想要点别的吗？

169
00:10:21,120 --> 00:10:24,000
Let's get some water.
来点水吧。

170
00:10:24,000 --> 00:10:28,280
Actually, fries.
实际上，要薯条。

171
00:10:28,280 --> 00:10:36,040
Small or large?
小份还是大份？

172
00:10:36,040 --> 00:10:39,640
This is great because we asked the assistant in
这很好，因为我们在

173
00:10:39,640 --> 00:10:43,680
the system message to clarify extras and sides.
系统消息中要求助手澄清附加选项和配菜。

174
00:10:43,680 --> 00:10:52,040
You get the idea, and please feel free to play with this yourself.
你明白了，欢迎自由地尝试一下。

175
00:10:52,040 --> 00:10:53,960
You can pause the video and just go ahead and
您可以暂停视频，然后继续

176
00:10:53,960 --> 00:10:56,720
run this in your own notebook on the left.
在左边的笔记本中运行这个。

177
00:10:56,720 --> 00:11:00,040
Now we can ask the model to create
现在我们可以要求模型创建

178
00:11:00,040 --> 00:11:01,920
a JSON summary that we could
一个我们可以

179
00:11:01,920 --> 00:11:04,560
send to the order system based on the conversation.
根据对话发送给订单系统的JSON摘要。

180
00:11:04,560 --> 00:11:08,160
So we're now appending another system message,
所以现在我们要追加另一个系统消息，

181
00:11:08,160 --> 00:11:09,720
which is an instruction,
这是一个指令，

182
00:11:09,720 --> 00:11:13,000
and we're saying, create a JSON summary of the previous food order,
我们说，创建一个之前食物订单的JSON摘要，

183
00:11:13,000 --> 00:11:15,160
itemize the price for each item.
列出每项的价格。

184
00:11:15,160 --> 00:11:17,360
The fields should be one pizza,
字段应该包括一份披萨，

185
00:11:17,360 --> 00:11:21,320
include side, two list of toppings,
包括边料，两种配料清单，

186
00:11:21,320 --> 00:11:22,720
three lists of drinks,
三种饮料清单，

187
00:11:22,720 --> 00:11:24,920
and four list of sides,
还有四种配菜清单，

188
00:11:24,920 --> 00:11:26,800
and finally the total price.
最后是总价格。

189
00:11:26,800 --> 00:11:31,520
You could also use a user message here.
这里您也可以使用用户消息。

190
00:11:31,520 --> 00:11:34,280
This does not have to be a system message.
这不一定是一个系统消息。

191
00:11:34,280 --> 00:11:37,680
So let's execute this.
那么让我们执行这个。

192
00:11:37,840 --> 00:11:41,240
Notice in this case, we're using a lower temperature
注意，在这种情况下，我们使用较低的“随机性参数”

193
00:11:41,240 --> 00:11:43,360
because for these kinds of tasks,
因为对于这些类型的任务，

194
00:11:43,360 --> 00:11:45,360
we want the output to be fairly predictable.
我们希望输出相当可预测。

195
00:11:45,360 --> 00:11:47,000
For a conversational agent,
对于一个会话代理，

196
00:11:47,000 --> 00:11:48,800
you might want to use a higher temperature.
您可能需要使用更高的“随机性参数”。

197
00:11:48,800 --> 00:11:51,680
However, in this case, I would maybe use a lower temperature as well,
然而，在这种情况下，我也可能使用较低的“随机性参数”，

198
00:11:51,680 --> 00:11:55,080
because for a customer's assistant chatbot,
因为对于一个客户助手聊天机器人，

199
00:11:55,080 --> 00:12:00,080
you might want the output to be a bit more predictable as well.
您可能希望输出也更加可预测。

200
00:12:00,080 --> 00:12:03,840
So here we have the summary of our order,
所以这里我们有我们订单的摘要，

201
00:12:03,840 --> 00:12:08,400
and so we could submit this to the order system if we wanted to.
因此，如果我们愿意，我们可以将此提交给订单系统。

202
00:12:08,400 --> 00:12:10,320
So there we have it.
所以我们就有了它。

203
00:12:10,320 --> 00:12:12,920
You've built your very own order chatbot.
您已经构建了自己的订购聊天机器人。

204
00:12:12,920 --> 00:12:17,600
Feel free to customize it yourself and play around with the system message
随意自定义它，并尝试更改系统消息

205
00:12:17,600 --> 00:12:20,600
to change the behavior of the chatbot
以改变聊天机器人的行为

206
00:12:20,600 --> 00:12:25,280
and get it to act as different personas with different knowledge.
并让它扮演具有不同知识的不同角色。
